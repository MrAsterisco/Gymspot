//
//  WorkoutView.swift
//  Gymspot
//
//  Created by Alessio Moiso on 15.05.22.
//

import SwiftUI
import GymspotKit

struct WorkoutPlanView: View {
  @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
  
  let workoutRoutineId: String
  let startWorkoutHandler: ((String) -> Void)?
  
  @StateObject private var viewModel = WorkoutPlanViewModel()
  @State private var isEditing = false
  @State private var isDeleting = false
  
  var body: some View {
    VStack {
      List {
        ForEach($viewModel.steps, id: \.self) { step in
          Section {
            step.wrappedValue.body
          }
        }
      }
      
      Spacer()
      
      Button(action: { startWorkout() }) {
        HStack {
          Image(systemName: "play.fill")
            .foregroundColor(.black)
          
          Text("Start")
            .foregroundColor(.black)
            .bold()
        }
        .frame(maxWidth: .infinity)
      }
      .tint(Color("Start"))
      .buttonStyle(.borderedProminent)
      .padding()
    }
    .navigationTitle(viewModel.workoutRoutine?.name ?? "")
    .navigationBarTitleDisplayMode(.inline)
    .frame(maxHeight: .infinity)
    .onAppear {
      viewModel.receive(workoutRoutineId: workoutRoutineId)
    }
    .toolbar {
      ToolbarItem(placement: .navigationBarTrailing) {
        Menu {
          Button(action: { isEditing.toggle() }) {
            Image(systemName: "pencil")
            Text("Edit")
          }
          Button(role: .destructive, action: { isDeleting.toggle() }) {
            Image(systemName: "trash")
            Text("Delete...")
          }
        } label: {
          Image(systemName: "ellipsis.circle.fill")
        }
      }
    }
    .sheet(isPresented: $isEditing) { AddRoutineView(mode: .editing(workoutRoutineId)) }
    .confirmationDialog(
      "Delete Routine",
      isPresented: $isDeleting
    ){
      Button(role: .destructive, action: deleteWorkoutRoutine) {
        Text("Delete")
      }
    } message: {
      Text("Your current and previous workouts that were generated by this routine will not be deleted.")
    }
  }
}

private extension WorkoutPlanView {
  func startWorkout() {
    viewModel.createWorkout {
      presentationMode.wrappedValue.dismiss()
      startWorkoutHandler?($0)
    }
  }
  
  func deleteWorkoutRoutine() {
    viewModel.deleteWorkoutRoutine()
    presentationMode.wrappedValue.dismiss()
  }
}

private extension WorkoutStep {
  var body: AnyView {
    switch kind {
    case .exercise:
      return AnyView(
        RoutineExerciseCell(workoutStep: self)
      )
    case .rest:
      return AnyView(
        RoutineRestCell(workoutStep: self)
      )
    }
  }
}

struct WorkoutPlanView_Previews: PreviewProvider {
  static var previews: some View {
    mock {
      NavigationView {
        WorkoutPlanView(
          workoutRoutineId: "0",
          startWorkoutHandler: nil
        )
      }
    }
  }
}
